/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import '@stencil/core';


import {
  EventEmitter,
} from '@stencil/core';


export namespace Components {

  interface K49Button {
    /**
    * Indicates a dangerous or potentially negative action
    */
    'destructive'?: boolean;
    /**
    * Disables the button, disallowing merchant interaction
    */
    'disabled'?: boolean;
    /**
    * Allows the button to grow to the width of its container
    */
    'full'?: boolean;
    /**
    * Replaces button text with a spinner while a background action is being performed
    */
    'loading'?: boolean;
    /**
    * Provides extra visual weight and identifies the primary action in a set of buttons
    */
    'primary'?: boolean;
    /**
    * Changes the size of the button, giving it more or less padding
    */
    'size'?: 'slim' | 'medium' | 'large';
    /**
    * Allows the button to submit a form
    */
    'submit'?: boolean;
  }
  interface K49ButtonAttributes extends StencilHTMLAttributes {
    /**
    * Indicates a dangerous or potentially negative action
    */
    'destructive'?: boolean;
    /**
    * Disables the button, disallowing merchant interaction
    */
    'disabled'?: boolean;
    /**
    * Allows the button to grow to the width of its container
    */
    'full'?: boolean;
    /**
    * Replaces button text with a spinner while a background action is being performed
    */
    'loading'?: boolean;
    /**
    * Event Callback when focus leaves button
    */
    'onButtonBlur'?: (event: CustomEvent<string>) => void;
    /**
    * Event Callback when clicked
    */
    'onButtonClick'?: (event: CustomEvent<string>) => void;
    /**
    * Event Callback when button becomes focussed
    */
    'onButtonFocus'?: (event: CustomEvent<string>) => void;
    /**
    * Provides extra visual weight and identifies the primary action in a set of buttons
    */
    'primary'?: boolean;
    /**
    * Changes the size of the button, giving it more or less padding
    */
    'size'?: 'slim' | 'medium' | 'large';
    /**
    * Allows the button to submit a form
    */
    'submit'?: boolean;
  }

  interface K49Image {
    'alt': string;
    'src': string;
    'width': number;
  }
  interface K49ImageAttributes extends StencilHTMLAttributes {
    'alt'?: string;
    'onLazyImgloaded'?: (event: CustomEvent<HTMLImageElement>) => void;
    'src'?: string;
    'width'?: number;
  }

  interface K49Spinner {}
  interface K49SpinnerAttributes extends StencilHTMLAttributes {}

  interface K49StockFinder {}
  interface K49StockFinderAttributes extends StencilHTMLAttributes {
    'onUcSymbolSelected'?: (event: CustomEvent<string>) => void;
  }

  interface K49StockPrice {
    'stockSymbol': string;
  }
  interface K49StockPriceAttributes extends StencilHTMLAttributes {
    'stockSymbol'?: string;
  }
}

declare global {
  interface StencilElementInterfaces {
    'K49Button': Components.K49Button;
    'K49Image': Components.K49Image;
    'K49Spinner': Components.K49Spinner;
    'K49StockFinder': Components.K49StockFinder;
    'K49StockPrice': Components.K49StockPrice;
  }

  interface StencilIntrinsicElements {
    'k49-button': Components.K49ButtonAttributes;
    'k49-image': Components.K49ImageAttributes;
    'k49-spinner': Components.K49SpinnerAttributes;
    'k49-stock-finder': Components.K49StockFinderAttributes;
    'k49-stock-price': Components.K49StockPriceAttributes;
  }


  interface HTMLK49ButtonElement extends Components.K49Button, HTMLStencilElement {}
  var HTMLK49ButtonElement: {
    prototype: HTMLK49ButtonElement;
    new (): HTMLK49ButtonElement;
  };

  interface HTMLK49ImageElement extends Components.K49Image, HTMLStencilElement {}
  var HTMLK49ImageElement: {
    prototype: HTMLK49ImageElement;
    new (): HTMLK49ImageElement;
  };

  interface HTMLK49SpinnerElement extends Components.K49Spinner, HTMLStencilElement {}
  var HTMLK49SpinnerElement: {
    prototype: HTMLK49SpinnerElement;
    new (): HTMLK49SpinnerElement;
  };

  interface HTMLK49StockFinderElement extends Components.K49StockFinder, HTMLStencilElement {}
  var HTMLK49StockFinderElement: {
    prototype: HTMLK49StockFinderElement;
    new (): HTMLK49StockFinderElement;
  };

  interface HTMLK49StockPriceElement extends Components.K49StockPrice, HTMLStencilElement {}
  var HTMLK49StockPriceElement: {
    prototype: HTMLK49StockPriceElement;
    new (): HTMLK49StockPriceElement;
  };

  interface HTMLElementTagNameMap {
    'k49-button': HTMLK49ButtonElement
    'k49-image': HTMLK49ImageElement
    'k49-spinner': HTMLK49SpinnerElement
    'k49-stock-finder': HTMLK49StockFinderElement
    'k49-stock-price': HTMLK49StockPriceElement
  }

  interface ElementTagNameMap {
    'k49-button': HTMLK49ButtonElement;
    'k49-image': HTMLK49ImageElement;
    'k49-spinner': HTMLK49SpinnerElement;
    'k49-stock-finder': HTMLK49StockFinderElement;
    'k49-stock-price': HTMLK49StockPriceElement;
  }


  export namespace JSX {
    export interface Element {}
    export interface IntrinsicElements extends StencilIntrinsicElements {
      [tagName: string]: any;
    }
  }
  export interface HTMLAttributes extends StencilHTMLAttributes {}

}
