$min-height: control-height();
$vertical-padding: ($min-height - line-height(body) - rem(2px)) / 2;
$slim-min-height: rem(30px);
$slim-vertical-padding: ($slim-min-height - line-height(body) - rem(2px)) / 2;
$large-min-height: rem(44px);
$large-vertical-padding: ($large-min-height - line-height(body) - rem(2px)) / 2;
$spinner-size: rem(20px);

@mixin button-base {
  $min-height: control-height();
  $vertical-padding: ($min-height - line-height(body) - rem(2px)) / 2;

  @include recolor-icon(color('ink', 'lighter'));
  position: relative;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  min-height: $min-height;
  min-width: $min-height;
  margin: 0;
  padding: $vertical-padding spacing();
  background: linear-gradient(
    to bottom,
    color('white'),
    color('sky', 'lighter')
  );
  border: border(dark);
  box-shadow: shadow(faint);
  border-radius: border-radius();
  line-height: 1;
  color: color('ink');
  text-align: center;
  cursor: pointer;
  user-select: none;
  text-decoration: none;
  transition-property: background, border, box-shadow;
  transition-duration: duration();
  transition-timing-function: easing();

  &:hover {
    background: linear-gradient(
      to bottom,
      color('sky', 'lighter'),
      color('sky', 'light')
    );
    border-color: color('sky', 'dark');
  }

  &:focus {
    border-color: color('indigo');
    outline: 0;
    box-shadow: 0 0 0 1px color('indigo');
  }

  &:active {
    // Same color gradient is necessary for background transitions
    background: linear-gradient(
      to bottom,
      color('sky', 'light'),
      color('sky', 'light')
    );
    border-color: color('sky', 'dark');
    box-shadow: 0 0 0 0 transparent,
      inset 0 1px 1px 0 rgba(color('ink', 'lighter'), 0.1),
      inset 0 1px 4px 0 rgba(color('ink', 'lighter'), 0.2);
  }
}

@mixin text-style-button-large {
  font-size: font-size(button-large);
  font-weight: 400;
  line-height: line-height(button-large);

  text-transform: initial;
  letter-spacing: initial;

  @include when-typography-not-condensed {
    font-size: font-size(button-large, large-screen);
  }
}

@mixin base-button-disabled {
  @include recolor-icon(color('ink', 'lightest'));
  transition: none;
  background: linear-gradient(
    to bottom,
    color('sky', 'light'),
    color('sky', 'light')
  );
  color: color('ink', 'lightest');
}

@mixin button-filled($button-color, $focus-color, $outline-color: null) {
  $border-color: darken($button-color, 10%);
  $active-color: darken($button-color, 15%);
  background: linear-gradient(
    to bottom,
    lighten($button-color, 2%),
    darken($button-color, 2%)
  );
  border-color: $border-color;
  box-shadow: inset 0 1px 0 0 lighten($button-color, 3%), shadow(faint),
    0 0 0 0 transparent;
  color: color('white');

  &:hover {
    background: linear-gradient(
      to bottom,
      $button-color,
      darken($button-color, 5%)
    );
    border-color: $border-color;
    color: color('white');
    text-decoration: none;
  }

  &:focus {
    border-color: $focus-color;
    box-shadow: inset 0 1px 0 0 lighten($button-color, 5%), shadow(faint),
      0 0 0 1px $focus-color;
  }

  &:active {
    background: linear-gradient(to bottom, $border-color, $border-color);
    border-color: $active-color;
    box-shadow: inset 0 0 0 0 transparent, shadow(faint),
      0 0 1px 0 $active-color;
  }
}

@mixin button-filled-disabled($button-color) {
  @include recolor-icon(color('white'));
  // Transition gradient to gradient to avoid flicker
  background: linear-gradient(
    to bottom,
    lighten($button-color, 25%),
    lighten($button-color, 25%)
  );
  border-color: lighten($button-color, 20%);
  box-shadow: none;
  color: color('white');
}

@mixin button-full-width {
  display: flex;
  width: 100%;
}

@mixin recolor-icon($main-color, $secondary-color: null) {
  fill: $main-color;

  @if $secondary-color != null {
    color: $secondary-color;
  }
}

.Button {
  @include button-base;

  &.disabled {
    @include base-button-disabled;
  }
}

.Icon {
  transition: color duration() easing();

  &:first-child {
    // This compensates for the typical icon used in buttons being
    // inset within its bounding box.
    margin-left: -(spacing(extra-tight));
  }

  &:last-child {
    // This compensates for the disclosure icon, which is substantially
    // inset within the viewbox (and makes it look like there is too much
    // spacing on the right of the button)
    margin-right: -(spacing(tight));
    margin-left: spacing(extra-tight);
  }

  + *:not(.Icon) {
    margin-left: spacing(extra-tight);
  }
}

.Spinner {
  position: absolute;
  top: 50%;
  left: 50%;
  margin-top: -($spinner-size / 2);
  margin-left: -($spinner-size / 2);
}

.primary {
  @include button-filled(color('indigo'), color('indigo', 'dark'));
  @include recolor-icon(color('white'));

  &.disabled {
    @include button-filled-disabled(color('indigo'));
  }
}

.destructive {
  @include button-filled(color('red'), color('red', 'dark'));
  @include recolor-icon(color('white'));

  &.disabled {
    @include button-filled-disabled(color('red'));
  }
}

.disabled {
  cursor: default;
  pointer-events: none;
}

@keyframes loading {
  to {
    transform: rotate(360deg);
  }
}

.loading {
  position: relative;
  transition: border-color duration() easing();

  &,
  &:hover,
  &.disabled {
    color: transparent;
  }
}

// stylelint-enable selector-max-specificity

.sizeSlim {
  min-height: $slim-min-height;
  padding: $slim-vertical-padding rem(12px);
}

.sizeLarge {
  min-height: $large-min-height;
  min-width: $large-min-height;
  padding: $large-vertical-padding rem(24px);

  .Content {
    @include text-style-button-large;
  }
}

.fullWidth {
  @include button-full-width;
}

.iconOnly {
  padding-left: rem(8px);
  padding-right: rem(8px);

  &.sizeLarge {
    padding-left: rem(12px);
    padding-right: rem(12px);
  }

  .Icon:first-child {
    margin-left: 0;
  }

  .Icon:last-child {
    margin-right: rem(-4px);
  }

  .Icon:only-child {
    margin-right: 0;
  }
}